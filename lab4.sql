## List the number of films per category.

#1 Retrieve the store ID, city, and country for each store.
SELECT * FROM store; # fk addressaddress
SELECT * FROM address; # citi id 
SELECT * FROM city; # city country
SELECT* FROM country;


SELECT s.store_id, s.address_id, a.city_id,co.country
FROM store s
INNER JOIN address a
			ON s.address_id = a.address_id
			INNER JOIN city c
						ON a.city_id =c.city_id
				INNER JOIN country co 
							ON co.country_id=c.country_id;

#2 Calculate the total revenue generated by each store in dollars.
SELECT * FROM store; # fk staff_id
SELECT* FROM staff; # link with oayment 
SELECT* FROM payment;

SELECT SUM(amount),store_id
FROM payment p
INNER JOIN staff s 
		ON s.staff_id=p.staff_id
GROUP BY s.store_id;


#3 Determine the average running time of films for each category.
SELECT * FROM film;  # film id
SELECT * FROM film_category;
SELECT AVG(length), f_c.category_id
FROM film f
INNER JOIN film_category f_c
		ON f.film_id=f_c.film_id
GROUP BY category_id;
#4 Identify the film categories with the longest average running time.
SELECT AVG(length), cat.name
FROM film f
INNER JOIN film_category f_c
		ON f.film_id=f_c.film_id
        INNER JOIN category cat
				ON cat.category_id=f_c.category_id
GROUP BY cat.name
ORDER BY AVG(length)DESC
LIMIT 1;
#5 Display the top 10 most frequently rented movies in descending order.
SELECT * FROM film;  # film id
SELECT * FROM inventory;


SELECT i.film_id, COUNT(*) AS row_count,f.title
FROM inventory i
INNER JOIN film f
ON f.film_id=i.film_id
GROUP BY film_id
ORDER BY COUNT(*) DESC
LIMIT 10;
#6 Determine if "Academy Dinosaur" can be rented from Store 1t
SELECT * FROM film;
SELECT title, film_id FROM film
WHERE title LIKE 'Academy Dinosaur';

SELECT f.title,f.film_id,i.store_id 
FROM film f
INNER JOIN inventory i 
		ON f.film_id=i.film_id
WHERE title LIKE 'Academy Dinosaur';
#7 Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating
#whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, 
#and this information can be obtained using a CASE statement combined with IFNULL."

SELECT DISTINCT f.title,
       CASE 
           WHEN IFNULL(i.inventory_id, 0) > 0 THEN "Available"
           ELSE "no Available"
       END AS disponibilidad
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id;